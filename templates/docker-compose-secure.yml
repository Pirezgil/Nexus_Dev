# Docker Compose Seguro - ERP Nexus
# Template otimizado para produção com segurança aprimorada
# Versão: 1.0

version: '3.8'

# ============================================================================
# SECRETS - Gerenciamento externo de informações sensíveis
# ============================================================================
secrets:
  jwt_secret:
    external: true
  postgres_password:
    external: true
  gateway_hmac_secret:
    external: true

# ============================================================================
# NETWORKS - Segmentação de rede para isolamento
# ============================================================================
networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
  backend:
    driver: bridge
    internal: true  # Rede interna, sem acesso externo
    ipam:
      config:
        - subnet: 172.19.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES - Armazenamento persistente
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_node_modules:
    driver: local

# ============================================================================
# SERVICES - Aplicações e infraestrutura
# ============================================================================
services:

  # --------------------------------------------------------------------------
  # DATABASE - PostgreSQL
  # --------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: nexus_erp
      POSTGRES_USER: nexus_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    
    secrets:
      - postgres_password
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    networks:
      - backend
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    
    # Logging configurado
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=postgres,environment=production"
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nexus_user -d nexus_erp"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # --------------------------------------------------------------------------
  # CACHE - Redis
  # --------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    
    # Configuração segura do Redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-default_password} --appendonly yes
    
    volumes:
      - redis_data:/data
    
    networks:
      - backend  # Apenas rede interna
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
        labels: "service=redis,environment=production"
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "auth", "${REDIS_PASSWORD:-default_password}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # --------------------------------------------------------------------------
  # USER MANAGEMENT SERVICE
  # --------------------------------------------------------------------------
  nexus-user-management:
    build:
      context: ./modules/user-management
      dockerfile: Dockerfile
    container_name: nexus-user-management
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://nexus_user@nexus-postgres:5432/nexus_erp
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@nexus-redis:6379
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - JWT_EXPIRES_IN=24h
      - GATEWAY_HMAC_SECRET_FILE=/run/secrets/gateway_hmac_secret
      - LOG_LEVEL=error
    
    secrets:
      - jwt_secret
      - gateway_hmac_secret
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - backend
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=user-management,environment=production"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # --------------------------------------------------------------------------
  # CRM SERVICE
  # --------------------------------------------------------------------------
  nexus-crm:
    build:
      context: .
      dockerfile: ./modules/crm/Dockerfile
    container_name: nexus-crm
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://nexus_user@nexus-postgres:5432/nexus_erp
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@nexus-redis:6379
      - USER_MANAGEMENT_URL=http://nexus-user-management:3000
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - GATEWAY_HMAC_SECRET_FILE=/run/secrets/gateway_hmac_secret
      - LOG_LEVEL=error
    
    secrets:
      - jwt_secret
      - gateway_hmac_secret
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nexus-user-management:
        condition: service_healthy
    
    networks:
      - backend
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=crm,environment=production"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # --------------------------------------------------------------------------
  # SERVICES MODULE
  # --------------------------------------------------------------------------
  nexus-services:
    build:
      context: .
      dockerfile: ./modules/services/Dockerfile
    container_name: nexus-services
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://nexus_user@nexus-postgres:5432/nexus_erp
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@nexus-redis:6379
      - USER_MANAGEMENT_URL=http://nexus-user-management:3000
      - CRM_URL=http://nexus-crm:3000
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - GATEWAY_HMAC_SECRET_FILE=/run/secrets/gateway_hmac_secret
      - LOG_LEVEL=error
    
    secrets:
      - jwt_secret
      - gateway_hmac_secret
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nexus-user-management:
        condition: service_healthy
      nexus-crm:
        condition: service_healthy
    
    networks:
      - backend
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=services,environment=production"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # --------------------------------------------------------------------------
  # AGENDAMENTO SERVICE
  # --------------------------------------------------------------------------
  nexus-agendamento:
    build:
      context: .
      dockerfile: ./modules/agendamento/Dockerfile
    container_name: nexus-agendamento
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://nexus_user@nexus-postgres:5432/nexus_erp
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@nexus-redis:6379
      - USER_MANAGEMENT_URL=http://nexus-user-management:3000
      - CRM_URL=http://nexus-crm:3000
      - SERVICES_URL=http://nexus-services:3000
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - GATEWAY_HMAC_SECRET_FILE=/run/secrets/gateway_hmac_secret
      - LOG_LEVEL=error
      # WhatsApp Business API (usar secrets em produção)
      - WHATSAPP_PHONE_NUMBER_ID=${WHATSAPP_PHONE_NUMBER_ID}
      - WHATSAPP_ACCESS_TOKEN=${WHATSAPP_ACCESS_TOKEN}
    
    secrets:
      - jwt_secret
      - gateway_hmac_secret
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nexus-user-management:
        condition: service_healthy
      nexus-crm:
        condition: service_healthy
      nexus-services:
        condition: service_healthy
    
    networks:
      - backend
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=agendamento,environment=production"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # --------------------------------------------------------------------------
  # API GATEWAY
  # --------------------------------------------------------------------------
  api-gateway:
    build:
      context: .
      dockerfile: ./modules/api-gateway/Dockerfile
    container_name: nexus-api-gateway
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - PORT=5001
      - USER_MANAGEMENT_URL=http://nexus-user-management:3000
      - CRM_URL=http://nexus-crm:3000
      - SERVICES_URL=http://nexus-services:3000
      - AGENDAMENTO_URL=http://nexus-agendamento:3000
      - FRONTEND_URL=http://nexus-frontend:3000
      - CORS_ORIGINS=http://nexus-nginx,http://nexus-nginx:80
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - GATEWAY_HMAC_SECRET_FILE=/run/secrets/gateway_hmac_secret
      - LOG_LEVEL=error
    
    secrets:
      - jwt_secret
      - gateway_hmac_secret
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nexus-user-management:
        condition: service_healthy
    
    networks:
      - frontend
      - backend
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    volumes:
      - ./modules/api-gateway/logs:/app/logs
      - ./shared:/app/shared:ro
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=api-gateway,environment=production"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # --------------------------------------------------------------------------
  # FRONTEND
  # --------------------------------------------------------------------------
  nexus-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nexus-frontend
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://nginx
      - NEXT_PUBLIC_API_URL=http://nginx
      - NEXT_PUBLIC_GATEWAY_URL=http://nginx
    
    depends_on:
      - api-gateway
    
    networks:
      - frontend
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=frontend,environment=production"
    
    # Frontend não precisa de health check HTTP interno
    # O Nginx faz o proxy e testa disponibilidade

  # --------------------------------------------------------------------------
  # REVERSE PROXY - Nginx
  # --------------------------------------------------------------------------
  nginx:
    image: nginx:alpine
    container_name: nexus-nginx
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"  # Para HTTPS futuro
    
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro  # Para certificados SSL
    
    depends_on:
      nexus-frontend:
        condition: service_started
      api-gateway:
        condition: service_healthy
    
    networks:
      - frontend
    
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
        labels: "service=nginx,environment=production"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============================================================================
# INSTRUÇÕES DE USO:
#
# 1. Criar secrets antes de usar:
#    echo "$(openssl rand -hex 32)" | docker secret create jwt_secret -
#    echo "$(openssl rand -hex 32)" | docker secret create postgres_password -
#    echo "$(openssl rand -hex 32)" | docker secret create gateway_hmac_secret -
#
# 2. Configurar variáveis de ambiente:
#    export REDIS_PASSWORD=$(openssl rand -hex 16)
#    export WHATSAPP_PHONE_NUMBER_ID=your_phone_id
#    export WHATSAPP_ACCESS_TOKEN=your_token
#
# 3. Aplicar este arquivo:
#    docker-compose -f docker-compose-secure.yml up -d
#
# 4. Validar segurança:
#    ./scripts/security-test.sh
#
# RECURSOS DE SEGURANÇA INCLUÍDOS:
# - Secrets externos para informações sensíveis
# - Segmentação de rede (frontend/backend separados)
# - Usuários não-root em todos os containers
# - Resource limits para todos os serviços
# - Logging centralizado e configurado
# - Health checks otimizados
# - Restart policies configuradas
# ============================================================================