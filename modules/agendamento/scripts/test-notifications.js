/**
 * Script para testar o sistema de notifica√ß√µes manualmente
 * Execute: node scripts/test-notifications.js
 */

const { WhatsAppProvider } = require('../src/services/providers/WhatsAppProvider');
const { SMSProvider } = require('../src/services/providers/SMSProvider');  
const { EmailProvider } = require('../src/services/providers/EmailProvider');
const { TemplateEngine } = require('../src/services/TemplateEngine');

require('dotenv').config();

async function testProviders() {
  console.log('üß™ Testando Sistema de Notifica√ß√µes\n');

  // Dados de teste
  const testData = {
    customer_name: 'Jo√£o da Silva',
    customer_phone: '11999999999',
    customer_email: 'teste@example.com',
    appointment_date: '15 de dezembro de 2024',
    appointment_time: '14:30',
    service_name: 'Consulta M√©dica',
    professional_name: 'Dr. Ana Costa',
    company_name: 'Cl√≠nica Nexus',
    company_phone: '(11) 3333-4444',
    company_address: 'Rua das Flores, 123 - S√£o Paulo, SP'
  };

  // 1. Testar Templates
  console.log('üìù Testando Templates...');
  try {
    const templates = TemplateEngine.getDefaultTemplates();
    const whatsappMessage = TemplateEngine.render(
      templates.whatsapp.confirmation, 
      testData
    );
    
    console.log('‚úÖ Template WhatsApp renderizado:');
    console.log(whatsappMessage);
    console.log();

    const emailTemplate = TemplateEngine.renderEmail(
      templates.email.confirmation,
      testData
    );
    
    console.log('‚úÖ Template Email renderizado:');
    console.log('Subject:', emailTemplate.subject);
    console.log('HTML preview:', emailTemplate.html.substring(0, 200) + '...');
    console.log();
  } catch (error) {
    console.log('‚ùå Erro nos templates:', error.message);
  }

  // 2. Testar WhatsApp Provider
  console.log('üì± Testando WhatsApp Provider...');
  try {
    const whatsappProvider = new WhatsAppProvider();
    
    // Teste de conectividade (n√£o envia mensagem real)
    const connectionTest = await whatsappProvider.testConnection();
    
    if (connectionTest.success) {
      console.log('‚úÖ WhatsApp conectado com sucesso');
      
      // Teste de envio (descomente para enviar mensagem real)
      // const result = await whatsappProvider.sendMessage({
      //   phone: testData.customer_phone,
      //   message: `üß™ TESTE: Ol√° ${testData.customer_name}, este √© um teste do sistema.`
      // });
      // console.log('Resultado envio:', result);
      
    } else {
      console.log('‚ö†Ô∏è  WhatsApp n√£o conectado:', connectionTest.error);
    }
  } catch (error) {
    console.log('‚ùå Erro WhatsApp:', error.message);
  }
  console.log();

  // 3. Testar SMS Provider  
  console.log('üì≤ Testando SMS Provider...');
  try {
    const smsProvider = new SMSProvider();
    
    // Teste de conectividade
    const connectionTest = await smsProvider.testConnection();
    
    if (connectionTest.success) {
      console.log('‚úÖ SMS (Twilio) conectado com sucesso');
      
      // Verificar saldo
      const balance = await smsProvider.getAccountBalance();
      if (balance.balance) {
        console.log(`üí∞ Saldo: ${balance.balance} ${balance.currency}`);
      }

      // Teste de valida√ß√£o de n√∫mero
      const validPhone = smsProvider.validatePhoneNumber(testData.customer_phone);
      console.log(`üìû N√∫mero ${testData.customer_phone} v√°lido:`, validPhone);
      
      // Teste de envio (descomente para enviar SMS real)
      // const result = await smsProvider.sendMessage(
      //   testData.customer_phone,
      //   `TESTE: Ol√° ${testData.customer_name}, teste do sistema Nexus.`
      // );
      // console.log('Resultado envio:', result);
      
    } else {
      console.log('‚ö†Ô∏è  SMS n√£o conectado:', connectionTest.error);
    }
  } catch (error) {
    console.log('‚ùå Erro SMS:', error.message);
  }
  console.log();

  // 4. Testar Email Provider
  console.log('üìß Testando Email Provider...');
  try {
    const emailProvider = new EmailProvider();
    
    // Teste de conectividade  
    const connectionTest = await emailProvider.testConnection();
    
    if (connectionTest.success) {
      console.log('‚úÖ Email (SMTP) conectado com sucesso');
      
      const config = emailProvider.getConfiguration();
      console.log(`üìÆ Configura√ß√£o: ${config.host}:${config.port} - ${config.from}`);
      
      // Teste de envio (descomente para enviar email real)
      // const result = await emailProvider.sendMessage(
      //   testData.customer_email,
      //   'üß™ Teste Sistema Nexus',
      //   `<h2>Teste do Sistema</h2><p>Ol√° ${testData.customer_name}, este √© um teste.</p>`,
      //   true
      // );
      // console.log('Resultado envio:', result);
      
    } else {
      console.log('‚ö†Ô∏è  Email n√£o conectado:', connectionTest.error);
    }
  } catch (error) {
    console.log('‚ùå Erro Email:', error.message);
  }
  console.log();

  // 5. Testar valida√ß√µes
  console.log('üîç Testando Valida√ß√µes...');
  
  // Valida√ß√£o de vari√°veis
  const incompleteData = {
    customer_name: 'Jo√£o',
    appointment_date: '15/12/2024'
    // Faltando outras vari√°veis obrigat√≥rias
  };
  
  const validation = TemplateEngine.validateVariables(incompleteData);
  console.log('Vari√°veis incompletas - V√°lido:', validation.valid);
  console.log('Vari√°veis faltando:', validation.missing);
  
  // Extra√ß√£o de vari√°veis
  const template = 'Ol√° {{customer_name}}, seu agendamento {{appointment_date}} √†s {{appointment_time}}';
  const extractedVars = TemplateEngine.extractVariables(template);
  console.log('Vari√°veis extra√≠das:', extractedVars);
  
  console.log();

  // 6. Resumo dos testes
  console.log('üìä Resumo dos Testes:');
  console.log('- ‚úÖ Templates funcionando');
  console.log('- ‚úÖ Valida√ß√µes funcionando'); 
  console.log('- üì± WhatsApp: Verificar configura√ß√£o se houver erro');
  console.log('- üì≤ SMS: Verificar credenciais Twilio se houver erro');
  console.log('- üìß Email: Verificar configura√ß√£o SMTP se houver erro');
  console.log();
  console.log('üí° Para testar envio real, descomente as linhas de envio no c√≥digo.');
  console.log('‚ö†Ô∏è  ATEN√á√ÉO: Envios reais consomem cr√©ditos/quota dos provedores!');
}

// Fun√ß√£o para testar webhook handlers
async function testWebhookSimulation() {
  console.log('\nüîó Simulando Webhooks...');
  
  // Simular webhook WhatsApp de confirma√ß√£o
  const mockWhatsAppMessage = {
    from: '5511999999999@s.whatsapp.net',
    type: 'text',
    timestamp: Math.floor(Date.now() / 1000).toString(),
    text: {
      body: 'sim'
    }
  };

  console.log('üì± Simulando mensagem WhatsApp "sim":', mockWhatsAppMessage);
  console.log('-> A√ß√£o esperada: Confirmar agendamento');
  console.log();

  // Simular webhook de status
  const mockStatusUpdate = {
    id: 'msg_123',
    status: 'delivered',
    timestamp: Math.floor(Date.now() / 1000).toString(),
    recipient_id: '5511999999999'
  };

  console.log('üìä Simulando update de status:', mockStatusUpdate);
  console.log('-> A√ß√£o esperada: Atualizar status no banco');
  console.log();
}

// Fun√ß√£o principal
async function main() {
  try {
    await testProviders();
    await testWebhookSimulation();
    
    console.log('üéâ Testes conclu√≠dos! Sistema pronto para uso.');
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { testProviders, testWebhookSimulation };