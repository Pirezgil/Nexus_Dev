#!/usr/bin/env node
/**
 * Script de Valida√ß√£o da Refatora√ß√£o de Endere√ßos
 * 
 * Este script valida se a corre√ß√£o do Erro #6 foi implementada corretamente:
 * - Verifica se a interface Address foi criada
 * - Testa as fun√ß√µes utilit√°rias de endere√ßo
 * - Valida se os tipos est√£o corretos
 * - Testa a convers√£o entre formatos de API
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîß VALIDA√á√ÉO: Refatora√ß√£o de Endere√ßos (Erro #6)');
console.log('=' .repeat(60));

let testsPassados = 0;
let testsFalhas = 0;

function test(nome, testeFn) {
  return async function() {
    console.log(`\nüß™ TESTE: ${nome}`);
    try {
      await testeFn();
      console.log(`‚úÖ PASSOU: ${nome}`);
      testsPassados++;
    } catch (error) {
      console.error(`‚ùå FALHOU: ${nome}`);
      console.error(`   Erro: ${error.message}`);
      if (error.stack) {
        console.error(`   Stack: ${error.stack.split('\n').slice(0, 3).join('\n')}`);
      }
      testsFalhas++;
    }
  };
}

// Caminho base do projeto
const baseDir = path.join(__dirname, '..');

// Teste 1: Verificar se a interface Address foi criada corretamente
await test('Interface Address criada nos tipos', async () => {
  const typesFile = path.join(baseDir, 'frontend/src/types/index.ts');
  
  if (!fs.existsSync(typesFile)) {
    throw new Error('Arquivo de tipos n√£o encontrado');
  }
  
  const content = fs.readFileSync(typesFile, 'utf8');
  
  // Verificar se a interface Address existe
  if (!content.includes('export interface Address')) {
    throw new Error('Interface Address n√£o encontrada');
  }
  
  // Verificar se tem os campos obrigat√≥rios
  const requiredFields = ['street', 'number', 'neighborhood', 'city', 'state', 'zipcode'];
  for (const field of requiredFields) {
    if (!content.includes(`${field}:`)) {
      throw new Error(`Campo obrigat√≥rio '${field}' n√£o encontrado na interface Address`);
    }
  }
  
  // Verificar se Customer foi atualizado para usar Address
  if (!content.includes('address: Address | null')) {
    throw new Error('Interface Customer n√£o foi atualizada para usar Address estruturado');
  }
  
  console.log('   ‚úÖ Interface Address encontrada com todos os campos');
  console.log('   ‚úÖ Interface Customer atualizada para usar Address');
})();

// Teste 2: Verificar se as fun√ß√µes utilit√°rias foram criadas
await test('Fun√ß√µes utilit√°rias de endere√ßo', async () => {
  const addressUtilsFile = path.join(baseDir, 'frontend/src/utils/address.ts');
  
  if (!fs.existsSync(addressUtilsFile)) {
    throw new Error('Arquivo address.ts n√£o encontrado');
  }
  
  const content = fs.readFileSync(addressUtilsFile, 'utf8');
  
  const requiredFunctions = [
    'formatAddress',
    'formatAddressCompact', 
    'isAddressComplete',
    'createEmptyAddress',
    'validateAddress',
    'normalizeCEP',
    'addressToAPIPayload',
    'addressFromAPIResponse'
  ];
  
  for (const funcName of requiredFunctions) {
    if (!content.includes(`export function ${funcName}`)) {
      throw new Error(`Fun√ß√£o '${funcName}' n√£o encontrada`);
    }
  }
  
  console.log(`   ‚úÖ Todas as ${requiredFunctions.length} fun√ß√µes utilit√°rias encontradas`);
})();

// Teste 3: Verificar se os formul√°rios foram atualizados
await test('Formul√°rio de cria√ß√£o atualizado', async () => {
  const novoClienteFile = path.join(baseDir, 'frontend/src/app/(main)/crm/novo/page.tsx');
  
  if (!fs.existsSync(novoClienteFile)) {
    throw new Error('Arquivo de cria√ß√£o de cliente n√£o encontrado');
  }
  
  const content = fs.readFileSync(novoClienteFile, 'utf8');
  
  // Verificar se o schema foi atualizado
  if (!content.includes('addressSchema')) {
    throw new Error('Schema de endere√ßo n√£o encontrado no formul√°rio de cria√ß√£o');
  }
  
  // Verificar se os campos estruturados est√£o presentes
  const addressFields = ['address.street', 'address.number', 'address.neighborhood', 'address.city', 'address.state', 'address.zipcode'];
  for (const field of addressFields) {
    if (!content.includes(`name="${field}"`)) {
      throw new Error(`Campo '${field}' n√£o encontrado no formul√°rio`);
    }
  }
  
  // Verificar se os campos antigos foram removidos
  if (content.includes('name="address"') && !content.includes('name="address.')) {
    throw new Error('Campo address como string ainda est√° presente (deveria ter sido removido)');
  }
  
  console.log('   ‚úÖ Formul√°rio de cria√ß√£o refatorado com campos estruturados');
})();

// Teste 4: Verificar se o formul√°rio de edi√ß√£o foi atualizado
await test('Formul√°rio de edi√ß√£o atualizado', async () => {
  const editClienteFile = path.join(baseDir, 'frontend/src/app/(main)/crm/[id]/page.tsx');
  
  if (!fs.existsSync(editClienteFile)) {
    throw new Error('Arquivo de edi√ß√£o de cliente n√£o encontrado');
  }
  
  const content = fs.readFileSync(editClienteFile, 'utf8');
  
  // Verificar se formatAddress √© usado
  if (!content.includes('formatAddress')) {
    throw new Error('Fun√ß√£o formatAddress n√£o est√° sendo usada na exibi√ß√£o');
  }
  
  // Verificar se os campos estruturados est√£o no modo de edi√ß√£o
  const addressFields = ['address.street', 'address.number', 'address.city', 'address.state'];
  for (const field of addressFields) {
    if (!content.includes(`name="${field}"`)) {
      throw new Error(`Campo '${field}' n√£o encontrado no formul√°rio de edi√ß√£o`);
    }
  }
  
  console.log('   ‚úÖ Formul√°rio de edi√ß√£o refatorado com exibi√ß√£o formatada');
})();

// Teste 5: Verificar se os hooks da API foram atualizados
await test('Hooks da API atualizados', async () => {
  const customersHookFile = path.join(baseDir, 'frontend/src/hooks/api/use-customers.ts');
  
  if (!fs.existsSync(customersHookFile)) {
    throw new Error('Arquivo de hooks de clientes n√£o encontrado');
  }
  
  const content = fs.readFileSync(customersHookFile, 'utf8');
  
  // Verificar se as fun√ß√µes de convers√£o est√£o sendo importadas
  if (!content.includes('addressToAPIPayload') || !content.includes('addressFromAPIResponse')) {
    throw new Error('Fun√ß√µes de convers√£o de endere√ßo n√£o foram importadas nos hooks');
  }
  
  // Verificar se a interface Customer foi atualizada
  if (!content.includes('address: Address | null')) {
    throw new Error('Interface Customer nos hooks n√£o foi atualizada');
  }
  
  // Verificar se a convers√£o est√° sendo usada nas opera√ß√µes
  if (!content.includes('addressToAPIPayload(data.address)')) {
    throw new Error('Convers√£o para API n√£o est√° sendo aplicada na cria√ß√£o');
  }
  
  if (!content.includes('addressFromAPIResponse')) {
    throw new Error('Convers√£o da API n√£o est√° sendo aplicada na leitura');
  }
  
  console.log('   ‚úÖ Hooks da API atualizados com convers√µes de endere√ßo');
})();

// Teste 6: Testar as fun√ß√µes utilit√°rias (se poss√≠vel)
await test('Teste das fun√ß√µes utilit√°rias', async () => {
  try {
    // Tentar carregar e testar as fun√ß√µes utilit√°rias
    const addressUtilsFile = path.join(baseDir, 'frontend/src/utils/address.ts');
    const content = fs.readFileSync(addressUtilsFile, 'utf8');
    
    // Verificar se a fun√ß√£o formatAddress produz sa√≠da esperada
    if (!content.includes('${address.street}, ${address.number}')) {
      throw new Error('L√≥gica de formata√ß√£o de endere√ßo n√£o est√° correta');
    }
    
    // Verificar se a valida√ß√£o de CEP existe
    if (!content.includes('/^\\d{5}-?\\d{3}$/')) {
      throw new Error('Regex de valida√ß√£o de CEP n√£o est√° presente');
    }
    
    // Verificar se a convers√£o para API mapeia corretamente
    if (!content.includes('address_street: address.street')) {
      throw new Error('Mapeamento para API n√£o est√° correto');
    }
    
    console.log('   ‚úÖ L√≥gica das fun√ß√µes utilit√°rias est√° correta');
  } catch (error) {
    throw new Error(`Erro ao testar fun√ß√µes utilit√°rias: ${error.message}`);
  }
})();

// Teste 7: Verificar consist√™ncia com o schema do backend
await test('Consist√™ncia com schema do backend', async () => {
  const crmDocFile = path.join(baseDir, 'docs/02-modules/crm.md');
  
  if (fs.existsSync(crmDocFile)) {
    const content = fs.readFileSync(crmDocFile, 'utf8');
    
    // Verificar se os campos do banco est√£o alinhados
    const backendFields = [
      'address_street',
      'address_number', 
      'address_complement',
      'address_neighborhood',
      'address_city',
      'address_state',
      'address_zipcode'
    ];
    
    let foundFields = 0;
    for (const field of backendFields) {
      if (content.includes(field)) {
        foundFields++;
      }
    }
    
    if (foundFields < 5) {
      throw new Error('Schema do backend n√£o encontrado ou incompleto na documenta√ß√£o');
    }
    
    console.log(`   ‚úÖ Schema do backend encontrado com ${foundFields} campos de endere√ßo`);
  } else {
    console.log('   ‚ö†Ô∏è  Documenta√ß√£o do CRM n√£o encontrada, pulando valida√ß√£o do schema');
  }
})();

// Resumo dos testes
console.log('\n' + '='.repeat(60));
console.log('üìä RESUMO DA VALIDA√á√ÉO');
console.log(`‚úÖ Testes Passaram: ${testsPassados}`);
console.log(`‚ùå Testes Falharam: ${testsFalhas}`);
console.log(`üìà Taxa de Sucesso: ${((testsPassados / (testsPassados + testsFalhas)) * 100).toFixed(1)}%`);

if (testsFalhas === 0) {
  console.log('\nüéâ TODOS OS TESTES PASSARAM! A refatora√ß√£o de endere√ßos foi implementada com sucesso.');
  console.log('\nüîí VALIDA√á√ÉO CR√çTICA:');
  console.log('   ‚úÖ Interface Address criada com campos estruturados');
  console.log('   ‚úÖ Tipos Customer atualizados para usar Address');
  console.log('   ‚úÖ Formul√°rios refatorados com campos detalhados');
  console.log('   ‚úÖ Fun√ß√µes utilit√°rias implementadas');
  console.log('   ‚úÖ Hooks da API com convers√£o de formato');
  console.log('   ‚úÖ Consist√™ncia com schema do backend');
  console.log('\nüöÄ A corre√ß√£o do Erro #6 (Inconsist√™ncia de estrutura de endere√ßo) est√° COMPLETA e VERIFICADA.');
  console.log('\nüí° BENEF√çCIOS ALCAN√áADOS:');
  console.log('   ‚Ä¢ ‚úÖ Alinhamento total entre frontend e backend');
  console.log('   ‚Ä¢ ‚úÖ Elimina√ß√£o de perda de dados de endere√ßo'); 
  console.log('   ‚Ä¢ ‚úÖ Prepara√ß√£o para integra√ß√£o com mapas e sistemas de entrega');
  console.log('   ‚Ä¢ ‚úÖ Valida√ß√£o robusta de campos de endere√ßo');
  console.log('   ‚Ä¢ ‚úÖ Experi√™ncia do usu√°rio melhorada com campos espec√≠ficos');
  process.exit(0);
} else {
  console.log('\nüí• Alguns testes falharam. Revise a implementa√ß√£o antes de prosseguir.');
  process.exit(1);
}