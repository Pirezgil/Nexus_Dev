/**
 * Teste de Valida√ß√£o da Estrutura de Headers
 * 
 * Valida se a refatora√ß√£o foi bem-sucedida verificando:
 * 1. Se a constante HTTP_HEADERS foi criada corretamente
 * 2. Se os arquivos est√£o importando e usando a constante
 * 3. Se n√£o h√° mais strings hardcoded para headers
 */

const fs = require('fs');
const path = require('path');

console.log('üîç VALIDANDO ESTRUTURA DE HEADERS AP√ìS REFATORA√á√ÉO');
console.log('===================================================');

// Teste 1: Verificar se a constante foi criada
console.log('\nüìã TESTE 1: Verificando constante HTTP_HEADERS');
const headersPath = path.join(__dirname, '../shared/constants/headers.ts');

if (fs.existsSync(headersPath)) {
  const headersContent = fs.readFileSync(headersPath, 'utf8');
  
  console.log('‚úÖ Arquivo headers.ts existe');
  
  // Verificar se cont√©m as constantes necess√°rias
  const hasCompanyId = headersContent.includes("COMPANY_ID: 'X-Company-ID'");
  const hasUserId = headersContent.includes("USER_ID: 'X-User-ID'");
  const hasGatewaySource = headersContent.includes("GATEWAY_SOURCE: 'X-Gateway-Source'");
  const hasGetHeaderKey = headersContent.includes('function getHeaderKey');
  
  console.log('‚úÖ COMPANY_ID definido:', hasCompanyId);
  console.log('‚úÖ USER_ID definido:', hasUserId);
  console.log('‚úÖ GATEWAY_SOURCE definido:', hasGatewaySource);
  console.log('‚úÖ Fun√ß√£o getHeaderKey definida:', hasGetHeaderKey);
  
} else {
  console.log('‚ùå Arquivo headers.ts n√£o encontrado');
}

// Teste 2: Verificar se API Gateway foi refatorado
console.log('\nüìã TESTE 2: Verificando refatora√ß√£o do API Gateway');
const apiGatewayPath = path.join(__dirname, '../modules/api-gateway/src/routes/services.ts');

if (fs.existsSync(apiGatewayPath)) {
  const gatewayContent = fs.readFileSync(apiGatewayPath, 'utf8');
  
  const hasImport = gatewayContent.includes("import { HTTP_HEADERS }");
  const usesConstant = gatewayContent.includes("HTTP_HEADERS.COMPANY_ID");
  const noHardcoded = !gatewayContent.includes("'X-Company-ID'");
  
  console.log('‚úÖ Importa HTTP_HEADERS:', hasImport);
  console.log('‚úÖ Usa HTTP_HEADERS.COMPANY_ID:', usesConstant);
  console.log('‚úÖ N√£o usa string hardcoded:', noHardcoded);
  
} else {
  console.log('‚ùå Arquivo services.ts do API Gateway n√£o encontrado');
}

// Teste 3: Verificar se ModuleIntegrator foi refatorado
console.log('\nüìã TESTE 3: Verificando refatora√ß√£o do ModuleIntegrator');
const integratorPath = path.join(__dirname, '../shared/integrators/ModuleIntegrator.ts');

if (fs.existsSync(integratorPath)) {
  const integratorContent = fs.readFileSync(integratorPath, 'utf8');
  
  const hasImport = integratorContent.includes("import { HTTP_HEADERS }");
  const usesConstant = integratorContent.includes("[HTTP_HEADERS.COMPANY_ID]");
  const noHardcodedId = !integratorContent.includes("'X-Company-Id'");
  
  console.log('‚úÖ Importa HTTP_HEADERS:', hasImport);
  console.log('‚úÖ Usa [HTTP_HEADERS.COMPANY_ID]:', usesConstant);
  console.log('‚úÖ N√£o usa string hardcoded X-Company-Id:', noHardcodedId);
  
} else {
  console.log('‚ùå Arquivo ModuleIntegrator.ts n√£o encontrado');
}

// Teste 4: Verificar se gatewayAuth foi refatorado
console.log('\nüìã TESTE 4: Verificando refatora√ß√£o do gatewayAuth');
const gatewayAuthPath = path.join(__dirname, '../modules/services/src/middleware/gatewayAuth.ts');

if (fs.existsSync(gatewayAuthPath)) {
  const authContent = fs.readFileSync(gatewayAuthPath, 'utf8');
  
  const hasImport = authContent.includes("import { HTTP_HEADERS, getHeaderKey }");
  const usesGetHeaderKey = authContent.includes("getHeaderKey(HTTP_HEADERS.COMPANY_ID)");
  const noMultipleHeaders = !authContent.includes("req.headers['x-company-id'] as string || ");
  
  console.log('‚úÖ Importa HTTP_HEADERS e getHeaderKey:', hasImport);
  console.log('‚úÖ Usa getHeaderKey(HTTP_HEADERS.COMPANY_ID):', usesGetHeaderKey);
  console.log('‚úÖ N√£o tem verifica√ß√£o dupla de headers:', noMultipleHeaders);
  
} else {
  console.log('‚ùå Arquivo gatewayAuth.ts n√£o encontrado');
}

// Teste 5: Verificar se validationController foi refatorado
console.log('\nüìã TESTE 5: Verificando refatora√ß√£o do validationController');
const validationPath = path.join(__dirname, '../modules/agendamento/src/controllers/validationController.ts');

if (fs.existsSync(validationPath)) {
  const validationContent = fs.readFileSync(validationPath, 'utf8');
  
  const hasImport = validationContent.includes("import { HTTP_HEADERS, getHeaderKey }");
  const usesGetHeaderKey = validationContent.includes("getHeaderKey(HTTP_HEADERS.COMPANY_ID)");
  const noHardcoded = !validationContent.includes("'x-company-id'");
  
  console.log('‚úÖ Importa HTTP_HEADERS e getHeaderKey:', hasImport);
  console.log('‚úÖ Usa getHeaderKey(HTTP_HEADERS.COMPANY_ID):', usesGetHeaderKey);
  console.log('‚úÖ N√£o usa string hardcoded x-company-id:', noHardcoded);
  
} else {
  console.log('‚ùå Arquivo validationController.ts n√£o encontrado');
}

console.log('\nüéâ VALIDA√á√ÉO DA ESTRUTURA CONCLU√çDA!');
console.log('üîß Pr√≥ximo passo: Testar funcionamento em runtime com autentica√ß√£o v√°lida');