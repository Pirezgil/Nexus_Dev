// ERP Nexus - Error Handling Test Suite\n// Comprehensive tests for customer deletion error scenarios\n\nimport { describe, test, expect, beforeEach, afterEach } from '@jest/globals';\nimport { uuidValidation, customerValidation, preValidation, errorFormatting } from '../frontend/src/utils/validation';\n\ndescribe('Customer Deletion Error Handling', () => {\n  describe('UUID Validation', () => {\n    test('should validate correct UUID format', () => {\n      const validUUIDs = [\n        'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',\n        '123e4567-e89b-12d3-a456-426614174000',\n        '6ba7b810-9dad-11d1-80b4-00c04fd430c8'\n      ];\n\n      validUUIDs.forEach(uuid => {\n        expect(uuidValidation.isValidUUID(uuid)).toBe(true);\n        const validation = uuidValidation.validateUUID(uuid);\n        expect(validation.isValid).toBe(true);\n        expect(validation.error).toBeUndefined();\n      });\n    });\n\n    test('should reject invalid UUID formats', () => {\n      const invalidUUIDs = [\n        '',\n        'not-a-uuid',\n        '123',\n        'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a1', // too short\n        'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a111', // too long\n        'g0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', // invalid character\n        'a0eebc99_9c0b_4ef8_bb6d_6bb9bd380a11', // wrong separators\n      ];\n\n      invalidUUIDs.forEach(uuid => {\n        expect(uuidValidation.isValidUUID(uuid)).toBe(false);\n        const validation = uuidValidation.validateUUID(uuid, 'Customer ID');\n        expect(validation.isValid).toBe(false);\n        expect(validation.error).toBeDefined();\n        expect(validation.suggestions).toBeDefined();\n      });\n    });\n\n    test('should handle edge cases', () => {\n      const edgeCases = [\n        null,\n        undefined,\n        123, // number instead of string\n        {}, // object\n        [],  // array\n      ];\n\n      edgeCases.forEach(value => {\n        expect(uuidValidation.isValidUUID(value as any)).toBe(false);\n      });\n    });\n\n    test('should sanitize UUID properly', () => {\n      const testCases = [\n        { input: '  A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11  ', expected: 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' },\n        { input: 'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', expected: 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11' },\n        { input: '', expected: '' },\n        { input: null, expected: '' },\n      ];\n\n      testCases.forEach(({ input, expected }) => {\n        expect(uuidValidation.sanitizeUUID(input as any)).toBe(expected);\n      });\n    });\n  });\n\n  describe('Customer Validation', () => {\n    test('should validate customer ID correctly', () => {\n      const validId = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';\n      const invalidId = 'invalid-id';\n\n      const validResult = customerValidation.validateCustomerId(validId);\n      expect(validResult.isValid).toBe(true);\n      expect(validResult.error).toBeUndefined();\n\n      const invalidResult = customerValidation.validateCustomerId(invalidId);\n      expect(invalidResult.isValid).toBe(false);\n      expect(invalidResult.error).toContain('ID do cliente');\n      expect(invalidResult.suggestions).toBeDefined();\n    });\n\n    test('should validate customer data comprehensively', () => {\n      const validData = {\n        name: 'João Silva',\n        email: 'joao@email.com',\n        phone: '(11) 99999-9999',\n        document: '12345678901'\n      };\n\n      const result = customerValidation.validateCustomerData(validData);\n      expect(result.isValid).toBe(true);\n      expect(Object.keys(result.errors)).toHaveLength(0);\n    });\n\n    test('should catch validation errors in customer data', () => {\n      const invalidData = {\n        name: '', // empty name\n        email: 'invalid-email', // invalid email format\n        phone: '123', // too short phone\n        document: '123' // invalid document length\n      };\n\n      const result = customerValidation.validateCustomerData(invalidData);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.name).toBeDefined();\n      expect(result.errors.email).toBeDefined();\n      expect(result.errors.phone).toBeDefined();\n      expect(result.errors.document).toBeDefined();\n      expect(result.suggestions.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Pre-validation', () => {\n    test('should validate before customer deletion', () => {\n      const validId = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';\n      const invalidId = 'invalid-id';\n\n      const validResult = preValidation.beforeCustomerDelete(validId);\n      expect(validResult.canProceed).toBe(true);\n      expect(validResult.errors).toHaveLength(0);\n      expect(validResult.warnings.length).toBeGreaterThan(0);\n\n      const invalidResult = preValidation.beforeCustomerDelete(invalidId);\n      expect(invalidResult.canProceed).toBe(false);\n      expect(invalidResult.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('Error Formatting', () => {\n    test('should format API errors correctly', () => {\n      const testCases = [\n        {\n          error: { response: { status: 404, data: { message: 'Customer not found' } } },\n          expectedType: 'not_found'\n        },\n        {\n          error: { response: { status: 400, data: { message: 'Invalid data' } } },\n          expectedType: 'validation'\n        },\n        {\n          error: { response: { status: 401, data: { message: 'Unauthorized' } } },\n          expectedType: 'unauthorized'\n        },\n        {\n          error: { response: { status: 403, data: { message: 'Forbidden' } } },\n          expectedType: 'forbidden'\n        },\n        {\n          error: { response: { status: 409, data: { message: 'Conflict' } } },\n          expectedType: 'conflict'\n        },\n        {\n          error: { response: { status: 500, data: { message: 'Server error' } } },\n          expectedType: 'server_error'\n        }\n      ];\n\n      testCases.forEach(({ error, expectedType }) => {\n        const formatted = errorFormatting.formatApiError(error);\n        expect(formatted.type).toBe(expectedType);\n        expect(formatted.title).toBeDefined();\n        expect(formatted.message).toBeDefined();\n        expect(Array.isArray(formatted.suggestions)).toBe(true);\n      });\n    });\n\n    test('should handle network and timeout errors', () => {\n      const networkError = { message: 'Network Error' };\n      const timeoutError = { code: 'ECONNABORTED' };\n\n      const networkFormatted = errorFormatting.formatApiError(networkError);\n      expect(networkFormatted.type).toBe('server_error');\n      expect(networkFormatted.suggestions).toContain('Tente novamente em alguns minutos');\n\n      const timeoutFormatted = errorFormatting.formatApiError(timeoutError);\n      expect(timeoutFormatted.type).toBe('server_error');\n    });\n\n    test('should provide common error messages', () => {\n      const scenarios = [\n        'customer_not_found',\n        'customer_delete_failed',\n        'invalid_customer_id',\n        'network_error',\n        'session_expired',\n        'insufficient_permissions'\n      ];\n\n      scenarios.forEach(scenario => {\n        const message = errorFormatting.getCommonErrorMessage(scenario);\n        expect(typeof message).toBe('string');\n        expect(message.length).toBeGreaterThan(0);\n      });\n\n      // Test fallback for unknown scenario\n      const unknownMessage = errorFormatting.getCommonErrorMessage('unknown_scenario');\n      expect(unknownMessage).toBe('Ocorreu um erro inesperado');\n    });\n  });\n\n  describe('Integration Tests', () => {\n    test('should handle complete error flow', () => {\n      // Simulate invalid customer ID scenario\n      const invalidId = 'not-a-uuid';\n      \n      // Pre-validation should catch this\n      const preValidationResult = preValidation.beforeCustomerDelete(invalidId);\n      expect(preValidationResult.canProceed).toBe(false);\n      expect(preValidationResult.errors.length).toBeGreaterThan(0);\n      \n      // If somehow it gets through, customer validation should also catch it\n      const customerValidationResult = customerValidation.validateCustomerId(invalidId);\n      expect(customerValidationResult.isValid).toBe(false);\n      \n      // Error formatting should provide user-friendly message\n      const mockApiError = {\n        response: {\n          status: 400,\n          data: {\n            message: 'ID do cliente possui formato inválido',\n            details: {\n              reason: 'VALIDATION_FAILED',\n              errors: { customerId: ['Formato de UUID inválido'] }\n            }\n          }\n        }\n      };\n      \n      const formattedError = errorFormatting.formatApiError(mockApiError);\n      expect(formattedError.type).toBe('validation');\n      expect(formattedError.suggestions.length).toBeGreaterThan(0);\n    });\n\n    test('should handle successful validation flow', () => {\n      const validId = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11';\n      \n      // All validations should pass\n      const preValidationResult = preValidation.beforeCustomerDelete(validId);\n      expect(preValidationResult.canProceed).toBe(true);\n      \n      const customerValidationResult = customerValidation.validateCustomerId(validId);\n      expect(customerValidationResult.isValid).toBe(true);\n      \n      const uuidValidationResult = uuidValidation.validateUUID(validId);\n      expect(uuidValidationResult.isValid).toBe(true);\n    });\n  });\n});\n\n// Mock data for testing\nexport const mockErrorScenarios = {\n  validCustomerId: 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',\n  invalidCustomerId: 'invalid-uuid-format',\n  emptyCustomerId: '',\n  nullCustomerId: null,\n  \n  validCustomerData: {\n    name: 'João Silva',\n    email: 'joao@email.com',\n    phone: '(11) 99999-9999',\n    document: '12345678901'\n  },\n  \n  invalidCustomerData: {\n    name: '',\n    email: 'invalid-email',\n    phone: '123',\n    document: '123'\n  },\n  \n  apiErrors: {\n    notFound: {\n      response: {\n        status: 404,\n        data: {\n          message: 'Cliente não encontrado ou não pertence à empresa',\n          details: {\n            reason: 'CUSTOMER_NOT_FOUND',\n            suggestions: [\n              'Verifique se o ID do cliente está correto',\n              'Confirme se o cliente pertence à sua empresa'\n            ]\n          }\n        }\n      }\n    },\n    \n    validationError: {\n      response: {\n        status: 400,\n        data: {\n          message: 'ID do cliente possui formato inválido',\n          details: {\n            reason: 'VALIDATION_FAILED',\n            errors: { customerId: ['Formato de UUID inválido'] }\n          }\n        }\n      }\n    },\n    \n    unauthorized: {\n      response: {\n        status: 401,\n        data: {\n          message: 'Informações de autenticação não encontradas',\n          details: {\n            reason: 'MISSING_AUTH_INFO',\n            suggestions: ['Verifique sua autenticação e tente novamente']\n          }\n        }\n      }\n    },\n    \n    serverError: {\n      response: {\n        status: 500,\n        data: {\n          message: 'Erro interno durante a exclusão do cliente',\n          details: {\n            reason: 'SYSTEM_ERROR',\n            suggestions: [\n              'Tente novamente em alguns minutos',\n              'Se o problema persistir, contate o suporte técnico'\n            ]\n          }\n        }\n      }\n    },\n    \n    networkError: {\n      message: 'Network Error',\n      code: 'NETWORK_ERROR'\n    },\n    \n    timeoutError: {\n      message: 'timeout of 5000ms exceeded',\n      code: 'ECONNABORTED'\n    }\n  }\n};